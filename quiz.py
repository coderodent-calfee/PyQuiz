from deckOfCards import DeckOfCards
from sudoku import Sudoku
import cProfile

def main():
    print("Running main quiz function...")
    print("Hello, World!")
    deck = DeckOfCards(9)
    deck.print_len()

    card = deck.pull_random_card()
    print(f"Pulled a {card}")
    deck.print_len()
    deck.print_deck()

def sudoku():
    # Code to execute



    board = [[".","."],[".","."]]
    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    print( "======== solve puzzle ========" )
    sudoku.solve_puzzle()
    
    
    board = [[".","1"],[".","."]]
    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    print( "======== solve puzzle ========" )
    sudoku.solve_puzzle()

    board = [[".", "2", ".", "."],[".", ".", "4", "."],[".", "4", ".", "."],[".", ".", "1", "."]]
    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    print( "======== solve puzzle ========" )
    sudoku.solve_puzzle()

    board = [["1", "2", "3", "4"],["1", "2", "3", "4"],[".", "4", ".", "."],[".", ".", "1", "."]]
    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    print( "======== solve puzzle ========" )
    sudoku.solve_puzzle()


    board = [["1", "2", "3", "4"],["4", "3", "2", "1"],["3", ".", ".", "."],["2", ".", "1", "."]]
    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    print( "======== solve puzzle ========" )
    sudoku.solve_puzzle()
    
    # empty board
    board = [
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ]
    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    print( "======== solve puzzle ========" )
    sudoku.solve_puzzle()


    '''board = [
        [".", ".", ".", "2", "6", ".", "7", ".", "1"],
        ["6", "8", ".", ".", "7", ".", ".", "9", "."],
        ["1", "9", ".", ".", ".", "4", "5", ".", "."],
        ["8", "2", ".", "1", ".", ".", ".", "4", "."],
        [".", ".", "4", "6", ".", "2", "9", ".", "."],
        [".", "5", ".", ".", ".", "3", ".", "2", "8"],
        [".", ".", "9", "3", ".", ".", ".", "7", "4"],
        [".", "4", ".", ".", "5", ".", ".", "3", "6"],
        ["7", ".", "3", ".", "1", "8", ".", ".", "."],
    ]'''

    board = [
        [".", ".", ".", "2", "6", ".", "7", ".", "1"],
        ["6", "8", ".", ".", "7", ".", ".", "9", "."],
        ["1", "9", ".", ".", ".", "4", "5", ".", "."],
        ["8", "2", ".", "1", ".", ".", ".", "4", "."],
        [".", ".", "4", "6", ".", "2", "9", ".", "."],
        [".", "5", ".", ".", ".", "3", ".", "2", "8"],
        [".", ".", "9", "3", ".", ".", ".", "7", "4"],
        [".", "4", ".", ".", "5", ".", ".", "3", "6"],
        ["7", ".", "3", ".", "1", "8", ".", ".", "."],
    ]
    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()

    solution_moves = [
        ["4", "3", "5", ".", ".", "9", ".", "8", "."],
        [".", ".", "2", "5", ".", "1", "4", ".", "3"],
        [".", ".", "7", "8", "3", ".", ".", "6", "2"],
        [".", ".", "6", ".", "9", "5", "3", ".", "7"],
        ["3", "7", ".", ".", "8", ".", ".", "1", "5"],
        ["9", ".", "1", "7", "4", ".", "6", ".", "."],
        ["5", "1", ".", ".", "2", "6", "8", ".", "."],
        ["2", ".", "8", "9", ".", "7", "1", ".", "."],
        [".", "6", ".", "4", ".", ".", "2", "5", "9"],
    ]

    solution = []

#    moves = sudoku.board_to_moves(solution_moves)

    print( "======== solve puzzle ========" )
    sudoku.solve_puzzle(solution)

    data = [
        ["1", "5", "2", "4", "8", "9", "3", "7", "6"],
        ["7", "3", "9", "2", "5", "6", "8", "4", "1"],
        ["4", "6", "8", "3", "7", "1", "2", "9", "5"],
        ["3", "8", "7", "1", "2", "4", "6", "5", "9"],
        ["5", "9", "1", "7", "6", "3", "4", "2", "8"],
        ["2", "4", "6", "8", "9", "5", "7", "1", "3"],
        ["9", "1", "4", "6", "3", "7", "5", "8", "2"],
        ["6", "2", "5", "9", "4", "8", "1", "3", "7"],
        ["8", "7", "3", "5", "1", "2", "9", "6", "4"],
    ]
    board = [
        ["1", ".", ".", "4", "8", "9", ".", ".", "6"],
        ["7", "3", ".", ".", ".", ".", ".", "4", "."],
        [".", ".", ".", ".", ".", "1", "2", "9", "5"],
        [".", ".", "7", "1", "2", ".", "6", ".", "."],
        ["5", ".", ".", "7", ".", "3", ".", ".", "8"],
        [".", ".", "6", ".", "9", "5", "7", ".", "."],
        ["9", "1", "4", "6", ".", ".", ".", ".", "."],
        [".", "2", ".", ".", ".", ".", ".", "3", "7"],
        ["8", ".", ".", "5", "1", "2", ".", ".", "4"],
    ]
    
    solution_moves = [
        [".", "5", "2", ".", ".", ".", "3", "7", "."],
        [".", ".", "9", "2", "5", "6", "8", ".", "1"],
        ["4", "6", "8", "3", "7", ".", ".", ".", "."],
        ["3", "8", ".", ".", ".", "4", ".", "5", "9"],
        [".", "9", "1", ".", "6", ".", "4", "2", "."],
        ["2", "4", ".", "8", ".", ".", ".", "1", "3"],
        [".", ".", ".", ".", "3", "7", "5", "8", "2"],
        ["6", ".", "5", "9", "4", "8", "1", ".", "."],
        [".", "7", "3", ".", ".", ".", "9", "6", "."],
    ]

    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    sudoku.print_setup()
    
    solution = []
    moves = sudoku.board_to_moves(solution_moves)
    moves_left = len(moves)

    print( "======== solve puzzle ========" )
    sudoku.solve_puzzle(solution) #, moves )

    board = [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    print( "======== solve puzzle ========" )
    sudoku.solve_puzzle()


    # Challenge 1 from Sudoku Solver by Logic
    board = [
        [".", "2", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "6", ".", ".", ".", ".", "3"],
        [".", "7", "4", ".", "8", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "3", ".", ".", "2"],
        [".", "8", ".", ".", "4", ".", ".", "1", "."],
        ["6", ".", ".", "5", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", "1", ".", "7", "8", "."],
        ["5", ".", ".", ".", ".", "9", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "4", "."],
    ]
    
    solution_moves = [
        ["1", ".", "6", "4", "3", "7", "9", "5", "8"],
        ["8", "9", "5", ".", "2", "1", "4", "7", "."],
        ["3", ".", ".", "9", ".", "5", "1", "2", "6"],
        ["4", "5", "7", "1", "9", ".", "8", "6", "."],
        ["9", ".", "3", "2", ".", "6", "5", ".", "7"],
        [".", "1", "2", ".", "7", "8", "3", "9", "4"],
        ["2", "6", "9", "3", ".", "4", ".", ".", "5"],
        [".", "4", "8", "7", "6", ".", "2", "3", "1"],
        ["7", "3", "1", "8", "5", "2", "6", ".", "9"],
    ]


    print( "======== set up board ========" )
    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    print( "======== solve puzzle ========" )
    solution = []
    moves = sudoku.board_to_moves(solution_moves)
    
    sudoku.solve_puzzle(solution, moves )


def profile_challenge_1():
    # Challenge 1 from Sudoku Solver by Logic
    board = [
        [".", "2", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", "6", ".", ".", ".", ".", "3"],
        [".", "7", "4", ".", "8", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "3", ".", ".", "2"],
        [".", "8", ".", ".", "4", ".", ".", "1", "."],
        ["6", ".", ".", "5", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", "1", ".", "7", "8", "."],
        ["5", ".", ".", ".", ".", "9", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", "4", "."],
    ]

    sudoku = Sudoku(board)
    sudoku.setup_puzzle()
    sudoku.solve_puzzle()    
    pass
    
if __name__ == "__main__":
#    main()

    # todo: strategies are taking too much time after they are needed: maybe set up a 'remove' conditional that can be used after the move is confirmed
    # or... set up a 'paper' grid of allowed/disallowed moves in a cell and the strategies don't stay around at all    
    # cProfile.run("profile_challenge_1()", sort="time")

